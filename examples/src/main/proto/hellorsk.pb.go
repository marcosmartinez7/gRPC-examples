// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hellorsk.proto

package hellorsk

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type HelloRskRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRskRequest) Reset()         { *m = HelloRskRequest{} }
func (m *HelloRskRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRskRequest) ProtoMessage()    {}
func (*HelloRskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18860a4c6b0ddaae, []int{0}
}

func (m *HelloRskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRskRequest.Unmarshal(m, b)
}
func (m *HelloRskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRskRequest.Marshal(b, m, deterministic)
}
func (m *HelloRskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRskRequest.Merge(m, src)
}
func (m *HelloRskRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRskRequest.Size(m)
}
func (m *HelloRskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRskRequest proto.InternalMessageInfo

func (m *HelloRskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloRskReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRskReply) Reset()         { *m = HelloRskReply{} }
func (m *HelloRskReply) String() string { return proto.CompactTextString(m) }
func (*HelloRskReply) ProtoMessage()    {}
func (*HelloRskReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_18860a4c6b0ddaae, []int{1}
}

func (m *HelloRskReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRskReply.Unmarshal(m, b)
}
func (m *HelloRskReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRskReply.Marshal(b, m, deterministic)
}
func (m *HelloRskReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRskReply.Merge(m, src)
}
func (m *HelloRskReply) XXX_Size() int {
	return xxx_messageInfo_HelloRskReply.Size(m)
}
func (m *HelloRskReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRskReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRskReply proto.InternalMessageInfo

func (m *HelloRskReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRskRequest)(nil), "hellorsk.HelloRskRequest")
	proto.RegisterType((*HelloRskReply)(nil), "hellorsk.HelloRskReply")
}

func init() { proto.RegisterFile("hellorsk.proto", fileDescriptor_18860a4c6b0ddaae) }

var fileDescriptor_18860a4c6b0ddaae = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0x2a, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x64,
	0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b,
	0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xea, 0x94, 0x54, 0xb9, 0xf8, 0x3d, 0x40, 0x2a, 0x83,
	0x8a, 0xb3, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x4d, 0x2e, 0x5e, 0x84, 0xb2,
	0x82, 0x9c, 0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0x74, 0x98, 0x3a, 0x18,
	0xd7, 0x28, 0x97, 0x8b, 0x2b, 0x28, 0xd8, 0xdb, 0xbd, 0x28, 0x35, 0xb5, 0x24, 0xb5, 0x48, 0x28,
	0x9e, 0x8b, 0x23, 0x38, 0xb1, 0x12, 0xac, 0x57, 0x48, 0x52, 0x0f, 0xee, 0x48, 0x34, 0x3b, 0xa5,
	0xc4, 0xb1, 0x49, 0x15, 0xe4, 0x54, 0x2a, 0xc9, 0x37, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x52, 0x49,
	0x44, 0xbf, 0xcc, 0x50, 0x3f, 0xb5, 0x22, 0x31, 0xb7, 0x20, 0x27, 0x55, 0xbf, 0x38, 0xb1, 0x12,
	0xac, 0xdc, 0x8a, 0x51, 0xcb, 0xc9, 0x88, 0x4b, 0x32, 0x33, 0x5f, 0x2f, 0xbd, 0xa8, 0x20, 0x59,
	0x0f, 0x2a, 0x5d, 0x0c, 0x37, 0xcb, 0x09, 0xee, 0xe8, 0x00, 0x90, 0x67, 0x03, 0x18, 0x17, 0x31,
	0x31, 0x7b, 0xf8, 0x04, 0x25, 0xb1, 0x81, 0xfd, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x29,
	0x24, 0x6a, 0xe5, 0x35, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RSKGreeterClient is the client API for RSKGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RSKGreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRskRequest, opts ...grpc.CallOption) (*HelloRskReply, error)
}

type rSKGreeterClient struct {
	cc *grpc.ClientConn
}

func NewRSKGreeterClient(cc *grpc.ClientConn) RSKGreeterClient {
	return &rSKGreeterClient{cc}
}

func (c *rSKGreeterClient) SayHello(ctx context.Context, in *HelloRskRequest, opts ...grpc.CallOption) (*HelloRskReply, error) {
	out := new(HelloRskReply)
	err := c.cc.Invoke(ctx, "/hellorsk.RSKGreeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RSKGreeterServer is the server API for RSKGreeter service.
type RSKGreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRskRequest) (*HelloRskReply, error)
}

// UnimplementedRSKGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedRSKGreeterServer struct {
}

func (*UnimplementedRSKGreeterServer) SayHello(ctx context.Context, req *HelloRskRequest) (*HelloRskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterRSKGreeterServer(s *grpc.Server, srv RSKGreeterServer) {
	s.RegisterService(&_RSKGreeter_serviceDesc, srv)
}

func _RSKGreeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSKGreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hellorsk.RSKGreeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSKGreeterServer).SayHello(ctx, req.(*HelloRskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RSKGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hellorsk.RSKGreeter",
	HandlerType: (*RSKGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _RSKGreeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellorsk.proto",
}
